															TERMWORK 1
1.1) Develop a menu driven program to implement a queue.The operations
would be
a. Add an item to the queue
b. Delete an item from queue
c. Display the queue

Max = 4
def enqueue(queue):
    if len(queue) == Max:
        print("Overflow")
    else:
        item = int(input("Enter the Item : "))
        queue.append(item)
def dequeue(queue):
    if len(queue) == 0:
        print("UnderFlow")
    else:
        return queue.pop(0)
def frontQueue(queue):
    if len(queue) == 0:
        print("Empty")
    else:
        return queue[0]
def rearQueue(queue):
    if len(queue) == 0:
        print("Empty")
    else:
        return queue[len(queue)-1]
def display(queue):
    if len(queue) == 0:
        print("Empty")
    else:
        for x in queue:
            print(x , end=" ")
    print()
q=[]
print("Heello" , "\N{Winking Face}")
while True:
    print("\nMenu\n1.Enqueue\n2.Dequeue\n3.Front\n4.Rear\n5.Display\n6.Exit\n")
    ch = int(input("Enter the choice : "))
    if ch == 1:
        enqueue(q)
    elif ch == 2:
        dequeue(q)
    elif ch == 3:
        frontQueue(q)
    elif ch == 4:
        rearQueue(q)
    elif ch == 5:
        display(q)
    elif ch == 6:
        print("Thank You For Using!!!")
        break
    else:
        print("Invalid Choice !!!")


























															TERMWORK 2
2.1) Store the following information in a dictionary:

Course Code: Course Name, Faculty, Number of registrations.
Perform the following operations using functions:
a. Find Course Name that has highest number of registrations.
b. Given the Course Code, display the associated details.
c. Display details of all courses.


d={}
def Add():
    cCode , cname , f , nor = map(str , input("Enter the Code , course name , faculty , No of Registration : ").split())
    if cCode in d:
        print("Code Alredy Exists !!!")
    else:
        d[cCode] = [cname , f , int(nor)]

def Highest():
    max = -100
    for x,y in d.items():
        if y[2] > max:
            max = y[2]
    hcode = []
    for x,y in d.items():
        if max == y[2]:
            hcode.append(x)
    print(f"max registrations : {max} , Codes are : {hcode}")
def displayWithCode():
    c = input("Enter the code : ")
    if c in d:
        print(c , " : " , d[c])
    else:
        print("No Entry with that code!!!")
def displayAll():
    if len(d) == 0:
        print("Empty Dict!!!")
    else:
        print("\t\tDict")
        for x,y in d.items():
            print(x , y)
while True:
    print("\n\n\n1.Add\n2.Highest\n3.Display with code\n4.Display all\n5.Exit")
    c = int(input("Enter the choice : "))
    if c-1 == 0:
        Add()
    elif c-2 == 0:
        Highest()
    elif c-3==0:
        displayWithCode()
    elif c-4 == 0:
        displayAll()
    elif c-5 == 0:
        print("Thank You For Using!!!")
        break
    else:
        print("Invalid!!!")


























															TERMWORK 3

3.1) Write a Python program to read the book information from the user and
store in a CSV file containing rows in the following format:
bookNo, title, author, price
Develop a menu-driven program (with functions for each) with the
following options:
1:Search Book by author
2:Search Books below specified price (Raise an exception if price entered is
&lt;= 0)
3:Search Books where title contains the specified word
4:Exit





import csv
def read(n):
    books=[]
    for i in range(n):
        no , t , a , p = map(str , input("Enter the Book Number, title , author , price : ").split())
        books.append([no , t , a , float(p)])
    with open("C:\\Users\\PRITHAM\\Desktop\\books.csv" , 'w' , newline = "") as f:
        w = csv.writer(f)
        w.writerows(books)
def searchByAuthor():
    a = input("Author : ")
    with open("C:\\Users\\PRITHAM\\Desktop\\books.csv" , 'r') as f:
        r = csv.reader(f)
        flag = False
        for book in r:
            if book[2] == a:
                flag = True
                print(book)
        if not flag:
            print("No Entry Found!!!")

def PriceSearch():
    try:
        p=float(input("Enter the Price : "))
        if p<0:
            raise ValueError("Exception : Price Error!!!")
        else:
            flag = False
            with open("C:\\Users\\PRITHAM\\Desktop\\books.csv" , 'r') as f:
                r = csv.reader(f)
                for book in r:
                    if float(book[3]) < p:
                        flag=True
                        print(book)
            if not flag:
                print("No Records Found!!!")
    except ValueError as e:
        print(e)

def TitleContains():
    t = input("Enter the title : ")
    with open("C:\\Users\\PRITHAM\\Desktop\\books.csv" , "r") as f:
        flag = False
        r = csv.reader(f)
        for book in r:
            if t in book[1]:
                flag = True
                print(book)
        if not flag:
            print("No Match")

n = int(input("Enter the Number of Records to enter : "))
read(n)
while True:
    print("\n\n1.Search by Author\n2.serch by price\n3.title contains\n4.exit")
    ch = int(input("Enter the Choice : "))
    if ch == 1:
        searchByAuthor()
    elif ch == 2:
        PriceSearch()
    elif ch==3:
        TitleContains()
    elif ch == 4:
        break
    else:
        print("Invalid!!!")





















															TERMWORK 4
4.1) Create an object-oriented program that allows you to enter data for
customers and employees.
Problem Details
Create a Person class that provides attributes for first name, last name, and
emailaddress. This class should provide a property or method that returns the
person’s fullname.
Create a Customer class that inherits the Person class. This class should add
an attribute for a customer number.
Create an Employee class that inherits the Person class. This class should add
anattribute for a PAN number.
The program should create a Customer or Employee object from the data entered
bythe user, and it should use this object to display the data to the user. To do
that, theprogram can use the isinstance() function to check whether an object is a
Customer orEmployee object.


class Person:
    def __init__(self , fn , ln , e):
        self.fname = fn
        self.lname = ln
        self.email = e
    def Display(self):
        print(f"Name : {self.fname} {self.lname}")
        print("Email : " , self.email)
class Customer(Person):
    def __init__(self , fn , ln , e , pn):
        Person.__init__(self , fn ,ln ,e)
        self.phno = pn
    def Display(self):
        Person.Display(self)
        print("Phone Number : " , self.phno)
class Employee(Person):
    def __init__(self , fn , ln , e , p):
        Person.__init__(self , fn , ln , e)
        self.pan = p
    def Display(self):
        Person.Display(self)
        print("Pan : " ,self.pan)
def show(obj):
    if isinstance(obj , Employee):
        print("Employee\n")
        obj.Display()
    elif isinstance(obj , Customer):
        print("Customer\n")
        obj.Display()
    elif isinstance(obj , Person):
        print("Person\n")
        obj.Display()

while True:
    fn , ln , e = map(str , input("Enter First name , last name , Email : ").split())
    print("\n\n1.Person\n2.Customer\n3.Employee\n4.Exit\n")
    ch = int(input("Enter the choice : "))
    if ch == 1:
        p = Person(fn , ln , e)
        show(p)
    elif ch ==2:
        n = input("Enter the Number  : ")
        c = Customer(fn , ln , e , n)
        show(c)
    elif ch==3:
        p = input("Enter the Pan : ")
        e = Employee(fn , ln , e , p)
        show(e)
    elif ch==4:
        print("Thank You !!!")
        break
    else:
        print("Invalid!!!")




















															TERMWORK 5

5.1) Write a Python program to perform the following:
a. Create a database named “products.db”
b. Create a table named “products” that has the following fields:
prodID: int
name: text
quantity: int
price: real
c. Insert n records into the table reading the values for each item from the
user.
d. Display the recordset after fetching all the rows.
e. Delete a product whose product ID is entered by the user.
f. Increase the price of all products whose current price is less than Rs.50,
by 10%.

g. Display all the products whose quantity is less than 40.

import sqlite3

class ProductClass:
    def __init__(self , dbName):
        self.dbName = dbName
    def dbCreate(self , conn):
        cursor = conn.cursor()
        cursor.execute('CREATE TABLE if not exists PRODUCTS1234(prodID int , name varchar(30),quantity int , price float);')

    def dbInsert(self , conn):
        n = int(input("Enter the Number of Records : "))
        for i in range(n):
            pid = int(input("Enter the prod ID : "))
            n = input("Enter the product name : ")
            q = int(input("Enter the Quantity : "))
            p = float(input("Enter the price : "))
            val = (pid , n , q , p)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO PRODUCTs1234(PRODID , NAME , QUANTITY , PRICE) VALUES(? , ? , ? , ?)' , val)
            conn.commit()

    def dbDisplayAll(self , conn):
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM PRODUCTS1234')
        rs = cursor.fetchall()
        for row in rs:
            for col in row:
                print(f'{col}' , end='\t')
            print()
        print()

    def dbDelete(self , conn):
        i = int(input("Enter the ID to Delete : "))
        cursor = conn.cursor()
        cursor.execute(f'DELETE FROM PRODUCTS1234 WHERE PRODID = {i}')
        conn.commit()
    def updatePrice(self , conn):
        cursor = conn.cursor()
        cursor.execute('UPDATE PRODUCTS1234 SET PRICE = PRICE*1.1 WHERE PRICE<50')
        conn.commit()
    def Displayless40(self , conn):
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM PRODUCTS1234 WHERE QUANTITY < 40')
        for row in cursor:
            for col in row:
                print(f'{col}\t' , end='')
            print()
        print()

try:
    p = ProductClass('PRODUCTS1234.sqlite')
    conn = sqlite3.connect(p.dbName)
    conn.row_factory = sqlite3.Row
    p.dbCreate(conn)
    while True:
        print("\n\n1.Insert\n2.Display All\n3.Delete\n4.UpdatePrice\n5.Display less 40 Quantity\n6.Exit\n")
        ch = int(input("Enter your choice : "))
        if ch == 1 :
            p.dbInsert(conn)
        elif ch==2:
            p.dbDisplayAll(conn)
        elif ch==3:
            p.dbDelete(conn)
        elif ch==4:
            p.updatePrice(conn)
        elif ch==5:
            p.Displayless40(conn)
        elif ch==6:
            print("Thank You For using!!!")
            break
        else:
            print("Inavlid Option")
except sqlite3.Error as e:
    print(f'DB Error : {e}')
finally:
    conn.commit()
    conn.close()











															TERMWORK 6

6.1)Develop the following GUI application.
import tkinter as tk
from tkinter import ttk

#root
root = tk.Tk()
root.title("Calculator")
root.geometry('600x400')

#Frame
frame = ttk.Frame(root , padding="20 20 20 20")
frame.pack()

#first number
ttk.Label(frame , text="First Number").grid(row=0 , column=0 , sticky = tk.E )
first = tk.StringVar()
ttk.Entry(frame ,width=25, textvariable=first).grid(row=0 ,  column=1)


#second Number
ttk.Label(frame , text="Second Number").grid(row=1 , column=0 , sticky = tk.E)
second = tk.StringVar()
ttk.Entry(frame ,width=25, textvariable=second).grid(row=1 ,  column=1)

#result
ttk.Label(frame , text="Result").grid(row=4 , column=0 , sticky = tk.E)
result = tk.StringVar()
ttk.Entry(frame ,width=25, textvariable=result , state='readonly').grid(row=4 ,  column=1)

#operations
def Add():
    f = float(first.get())
    s = float(second.get())
    result.set(f+s)

def Sub():
    f = float(first.get())
    s = float(second.get())
    result.set(f-s)

def Mul():
    f = float(first.get())
    s = float(second.get())
    result.set(f*s)

def Div():
    try:
        f = float(first.get())
        s = float(second.get())
        result.set(f/s)
    except:
        result.set("Invalid Division!!!")

#Buttons
ttk.Button(frame , text = "Add" , command = Add).grid(row=2 , column=0)
ttk.Button(frame , text = "Sub" , command = Sub).grid(row=2 , column=1)
ttk.Button(frame , text = "Mul" , command = Mul).grid(row=3 , column=0)
ttk.Button(frame , text = "Div" , command = Div).grid(row=3 , column=1)

for child in frame.winfo_children():
    child.grid_configure(padx=20 , pady = 20)

root.mainloop()














															TERMWORK 7
7.1) Three IA’s are conducted for a class of 10 students for the subject Maths.
The name, marks and USN are read from a file in.txt. Find the average of
the IA for each student and write the USN and average to a file out.txt.
Display the highest average of the class on the console.


import numpy as np
import pandas as pd
df = np.loadtxt("tw7file.txt", usecols=range(1, 4), delimiter=',')
print("Data")
print(df)
#calculate the Average
avg = np.array([])
for marks in df:
    avg = np.append(avg , round(np.mean(marks) , 2))
print("The Average Marks are : ",end="")
for x in avg:
    print(x , end="\t")
print()


maximum average
print("The Maximum Average is : " , np.max(avg))



output file me dalna hai
with open("tw7file.txt" , 'r') as readfile:
    alllines = readfile.readlines()
    ct = 0
    with open("output.txt" , 'w') as writefile:
        for line in alllines:
            usn = line.split(',')[4][:-1]
            a = avg[ct]
            ct+=1
            writefile.write(usn + "\t:\t" + str(a) + "\n")



















															TERMWORK 8
8.1) Write a Pandas program to create a Data Frame from csv and perform the
following operations:
a) Display column names of data frame
b) Read the column name and display unique values, 
c) Display frequency of occurrence of each unique value.
d) Count of total number of records in the Dataframe.


import numpy as np
import pandas as pd

df = pd.read_csv("tw8file.csv")
# display columns

print("\t\t\tColumns")
print("="*80)
for c in df.columns:
    print(c , end='\t')
print()

attr = input("Enter the Column name : ")
data = list(df[attr])
print(f"The unique vales for the column {attr} is : ",end="")
for v in np.unique(data):
    print(v, end=" ")
print("\nPrinting Unique values with freq")
for v in np.unique(data):
    print(v , "\t\t:\t\t" , data.count(v))

print("Total number of records are : " , len(df))









